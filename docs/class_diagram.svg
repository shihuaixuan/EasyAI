<svg width="1400" height="1200" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .class-box { fill: #f8f9fa; stroke: #333; stroke-width: 2; }
      .abstract-class { fill: #e3f2fd; stroke: #1976d2; stroke-width: 2; }
      .interface { fill: #fff3e0; stroke: #f57c00; stroke-width: 2; }
      .entity { fill: #e8f5e8; stroke: #4caf50; stroke-width: 2; }
      .service { fill: #fce4ec; stroke: #e91e63; stroke-width: 2; }
      .factory { fill: #f3e5f5; stroke: #9c27b0; stroke-width: 2; }
      .text { font-family: Arial, sans-serif; font-size: 12px; fill: #333; }
      .title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #333; }
      .method { font-family: Arial, sans-serif; font-size: 10px; fill: #666; }
      .arrow { stroke: #333; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
      .dashed { stroke-dasharray: 5,5; }
      .inheritance { stroke: #1976d2; stroke-width: 2; fill: none; marker-end: url(#triangle); }
      .composition { stroke: #4caf50; stroke-width: 2; fill: none; marker-end: url(#diamond); }
      .dependency { stroke: #ff9800; stroke-width: 1; stroke-dasharray: 3,3; fill: none; marker-end: url(#arrowhead); }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#333" />
    </marker>
    <marker id="triangle" markerWidth="12" markerHeight="10" refX="12" refY="5" orient="auto">
      <polygon points="0 0, 12 5, 0 10" fill="none" stroke="#1976d2" stroke-width="2" />
    </marker>
    <marker id="diamond" markerWidth="12" markerHeight="8" refX="12" refY="4" orient="auto">
      <polygon points="0 4, 6 0, 12 4, 6 8" fill="none" stroke="#4caf50" stroke-width="2" />
    </marker>
  </defs>
  
  <!-- 标题 -->
  <text x="700" y="30" class="title" text-anchor="middle" font-size="18">大模型统一接口配置方案 - 类关系图</text>
  
  <!-- 配置基类 -->
  <rect x="50" y="60" width="200" height="120" class="abstract-class" />
  <text x="150" y="80" class="title" text-anchor="middle">BaseConfig</text>
  <line x1="50" y1="85" x2="250" y2="85" stroke="#333" />
  <text x="60" y="100" class="method">+ api_key: str</text>
  <text x="60" y="115" class="method">+ base_url: Optional[str]</text>
  <text x="60" y="130" class="method">+ timeout: int</text>
  <text x="60" y="145" class="method">+ max_retries: int</text>
  <line x1="50" y1="150" x2="250" y2="150" stroke="#333" />
  <text x="60" y="165" class="method">+ validate(): bool</text>
  
  <!-- 具体配置类 -->
  <rect x="300" y="60" width="180" height="100" class="class-box" />
  <text x="390" y="80" class="title" text-anchor="middle">OpenAIConfig</text>
  <line x1="300" y1="85" x2="480" y2="85" stroke="#333" />
  <text x="310" y="100" class="method">+ model: str</text>
  <text x="310" y="115" class="method">+ temperature: float</text>
  <text x="310" y="130" class="method">+ max_tokens: int</text>
  <line x1="300" y1="135" x2="480" y2="135" stroke="#333" />
  <text x="310" y="150" class="method">+ get_completion_kwargs()</text>
  
  <rect x="500" y="60" width="180" height="100" class="class-box" />
  <text x="590" y="80" class="title" text-anchor="middle">DeepSeekConfig</text>
  <line x1="500" y1="85" x2="680" y2="85" stroke="#333" />
  <text x="510" y="100" class="method">+ model: str</text>
  <text x="510" y="115" class="method">+ temperature: float</text>
  <text x="510" y="130" class="method">+ max_tokens: int</text>
  <line x1="500" y1="135" x2="680" y2="135" stroke="#333" />
  <text x="510" y="150" class="method">+ get_completion_kwargs()</text>
  
  <rect x="700" y="60" width="180" height="100" class="class-box" />
  <text x="790" y="80" class="title" text-anchor="middle">ClaudeConfig</text>
  <line x1="700" y1="85" x2="880" y2="85" stroke="#333" />
  <text x="710" y="100" class="method">+ model: str</text>
  <text x="710" y="115" class="method">+ temperature: float</text>
  <text x="710" y="130" class="method">+ max_tokens: int</text>
  <line x1="700" y1="135" x2="880" y2="135" stroke="#333" />
  <text x="710" y="150" class="method">+ get_completion_kwargs()</text>
  
  <!-- 配置工厂 -->
  <rect x="50" y="220" width="200" height="80" class="factory" />
  <text x="150" y="240" class="title" text-anchor="middle">ConfigFactory</text>
  <line x1="50" y1="245" x2="250" y2="245" stroke="#333" />
  <text x="60" y="260" class="method">+ create_config(provider)</text>
  <text x="60" y="275" class="method">+ get_supported_providers()</text>
  <text x="60" y="290" class="method">+ get_config_template()</text>
  
  <!-- 配置管理器 -->
  <rect x="300" y="220" width="200" height="100" class="service" />
  <text x="400" y="240" class="title" text-anchor="middle">ConfigManager</text>
  <line x1="300" y1="245" x2="500" y2="245" stroke="#333" />
  <text x="310" y="260" class="method">+ get_config(user_id, provider)</text>
  <text x="310" y="275" class="method">+ save_user_config()</text>
  <text x="310" y="290" class="method">+ list_user_configs()</text>
  <text x="310" y="305" class="method">+ delete_user_config()</text>
  
  <!-- 用户配置实体 -->
  <rect x="550" y="220" width="200" height="140" class="entity" />
  <text x="650" y="240" class="title" text-anchor="middle">UserModelConfig</text>
  <line x1="550" y1="245" x2="750" y2="245" stroke="#333" />
  <text x="560" y="260" class="method">+ id: str</text>
  <text x="560" y="275" class="method">+ user_id: str</text>
  <text x="560" y="290" class="method">+ config_name: str</text>
  <text x="560" y="305" class="method">+ provider: ModelProvider</text>
  <text x="560" y="320" class="method">+ api_key: str</text>
  <text x="560" y="335" class="method">+ is_default: bool</text>
  <line x1="550" y1="340" x2="750" y2="340" stroke="#333" />
  <text x="560" y="355" class="method">+ to_dict(): Dict</text>
  
  <!-- 仓储接口 -->
  <rect x="800" y="220" width="220" height="120" class="interface" />
  <text x="910" y="240" class="title" text-anchor="middle">UserModelConfigRepository</text>
  <line x1="800" y1="245" x2="1020" y2="245" stroke="#333" />
  <text x="810" y="260" class="method">+ create(config)</text>
  <text x="810" y="275" class="method">+ get_by_id(id)</text>
  <text x="810" y="290" class="method">+ get_by_user_and_name()</text>
  <text x="810" y="305" class="method">+ update(config)</text>
  <text x="810" y="320" class="method">+ delete(id)</text>
  <text x="810" y="335" class="method">+ set_default()</text>
  
  <!-- 仓储实现 -->
  <rect x="1050" y="220" width="220" height="100" class="class-box" />
  <text x="1160" y="240" class="title" text-anchor="middle">UserModelConfigRepositoryImpl</text>
  <line x1="1050" y1="245" x2="1270" y2="245" stroke="#333" />
  <text x="1060" y="260" class="method">+ db_session: Session</text>
  <line x1="1050" y1="265" x2="1270" y2="265" stroke="#333" />
  <text x="1060" y="280" class="method">+ create(config)</text>
  <text x="1060" y="295" class="method">+ get_by_id(id)</text>
  <text x="1060" y="310" class="method">+ update(config)</text>
  
  <!-- 应用服务 -->
  <rect x="50" y="400" width="220" height="120" class="service" />
  <text x="160" y="420" class="title" text-anchor="middle">UserModelConfigService</text>
  <line x1="50" y1="425" x2="270" y2="425" stroke="#333" />
  <text x="60" y="440" class="method">+ create_config()</text>
  <text x="60" y="455" class="method">+ update_config()</text>
  <text x="60" y="470" class="method">+ delete_config()</text>
  <text x="60" y="485" class="method">+ get_config()</text>
  <text x="60" y="500" class="method">+ test_config()</text>
  <text x="60" y="515" class="method">+ set_default_config()</text>
  
  <!-- 模型接口 -->
  <rect x="320" y="400" width="180" height="100" class="interface" />
  <text x="410" y="420" class="title" text-anchor="middle">BaseModel</text>
  <line x1="320" y1="425" x2="500" y2="425" stroke="#333" />
  <text x="330" y="440" class="method">+ complete(messages)</text>
  <text x="330" y="455" class="method">+ get_config()</text>
  <text x="330" y="470" class="method">+ update_config()</text>
  <line x1="320" y1="475" x2="500" y2="475" stroke="#333" />
  <text x="330" y="490" class="method">+ _config: BaseConfig</text>
  
  <!-- 具体模型实现 -->
  <rect x="550" y="400" width="160" height="80" class="class-box" />
  <text x="630" y="420" class="title" text-anchor="middle">OpenAIModel</text>
  <line x1="550" y1="425" x2="710" y2="425" stroke="#333" />
  <text x="560" y="440" class="method">+ client: OpenAI</text>
  <line x1="550" y1="445" x2="710" y2="445" stroke="#333" />
  <text x="560" y="460" class="method">+ complete(messages)</text>
  <text x="560" y="475" class="method">+ _prepare_request()</text>
  
  <rect x="730" y="400" width="160" height="80" class="class-box" />
  <text x="810" y="420" class="title" text-anchor="middle">DeepSeekModel</text>
  <line x1="730" y1="425" x2="890" y2="425" stroke="#333" />
  <text x="740" y="440" class="method">+ client: OpenAI</text>
  <line x1="730" y1="445" x2="890" y2="445" stroke="#333" />
  <text x="740" y="460" class="method">+ complete(messages)</text>
  <text x="740" y="475" class="method">+ _prepare_request()</text>
  
  <rect x="910" y="400" width="160" height="80" class="class-box" />
  <text x="990" y="420" class="title" text-anchor="middle">ClaudeModel</text>
  <line x1="910" y1="425" x2="1070" y2="425" stroke="#333" />
  <text x="920" y="440" class="method">+ client: Anthropic</text>
  <line x1="910" y1="445" x2="1070" y2="445" stroke="#333" />
  <text x="920" y="460" class="method">+ complete(messages)</text>
  <text x="920" y="475" class="method">+ _prepare_request()</text>
  
  <!-- 模型工厂 -->
  <rect x="50" y="550" width="200" height="100" class="factory" />
  <text x="150" y="570" class="title" text-anchor="middle">ModelFactory</text>
  <line x1="50" y1="575" x2="250" y2="575" stroke="#333" />
  <text x="60" y="590" class="method">+ create_model(provider)</text>
  <text x="60" y="605" class="method">+ register_provider()</text>
  <text x="60" y="620" class="method">+ get_supported_providers()</text>
  <line x1="50" y1="625" x2="250" y2="625" stroke="#333" />
  <text x="60" y="640" class="method">- _providers: Dict</text>
  
  <!-- 模型管理器 -->
  <rect x="300" y="550" width="200" height="100" class="service" />
  <text x="400" y="570" class="title" text-anchor="middle">ModelManager</text>
  <line x1="300" y1="575" x2="500" y2="575" stroke="#333" />
  <text x="310" y="590" class="method">+ get_model(user_id, provider)</text>
  <text x="310" y="605" class="method">+ get_user_default_model()</text>
  <text x="310" y="620" class="method">+ clear_cache()</text>
  <line x1="300" y1="625" x2="500" y2="625" stroke="#333" />
  <text x="310" y="640" class="method">- _cache: Dict</text>
  
  <!-- API控制器 -->
  <rect x="550" y="550" width="220" height="120" class="class-box" />
  <text x="660" y="570" class="title" text-anchor="middle">UserModelConfigController</text>
  <line x1="550" y1="575" x2="770" y2="575" stroke="#333" />
  <text x="560" y="590" class="method">+ create_config()</text>
  <text x="560" y="605" class="method">+ get_user_configs()</text>
  <text x="560" y="620" class="method">+ update_config()</text>
  <text x="560" y="635" class="method">+ delete_config()</text>
  <text x="560" y="650" class="method">+ test_config()</text>
  <text x="560" y="665" class="method">+ set_default_config()</text>
  
  <!-- 关系线 -->
  
  <!-- 继承关系 -->
  <line x1="390" y1="160" x2="200" y2="120" class="inheritance" />
  <line x1="590" y1="160" x2="200" y2="120" class="inheritance" />
  <line x1="790" y1="160" x2="200" y2="120" class="inheritance" />
  
  <!-- 模型继承 -->
  <line x1="630" y1="480" x2="450" y2="450" class="inheritance" />
  <line x1="810" y1="480" x2="450" y2="450" class="inheritance" />
  <line x1="990" y1="480" x2="450" y2="450" class="inheritance" />
  
  <!-- 仓储实现 -->
  <line x1="1050" y1="280" x2="1020" y2="280" class="inheritance" />
  
  <!-- 组合关系 -->
  <line x1="150" y1="300" x2="150" y2="400" class="composition" />
  <line x1="400" y1="320" x2="400" y2="400" class="composition" />
  <line x1="150" y1="650" x2="150" y2="520" class="composition" />
  <line x1="400" y1="650" x2="400" y2="520" class="composition" />
  
  <!-- 依赖关系 -->
  <line x1="250" y1="260" x2="300" y2="260" class="dependency" />
  <line x1="500" y1="260" x2="550" y2="260" class="dependency" />
  <line x1="750" y1="280" x2="800" y2="280" class="dependency" />
  <line x1="270" y1="460" x2="320" y2="440" class="dependency" />
  <line x1="550" y1="610" x2="270" y2="460" class="dependency" />
  
  <!-- 图例 -->
  <rect x="50" y="720" width="300" height="150" fill="none" stroke="#333" stroke-width="1" />
  <text x="200" y="740" class="title" text-anchor="middle">图例</text>
  
  <line x1="70" y1="760" x2="120" y2="760" class="inheritance" />
  <text x="130" y="765" class="text">继承关系</text>
  
  <line x1="70" y1="780" x2="120" y2="780" class="composition" />
  <text x="130" y="785" class="text">组合关系</text>
  
  <line x1="70" y1="800" x2="120" y2="800" class="dependency" />
  <text x="130" y="805" class="text">依赖关系</text>
  
  <rect x="70" y="820" width="40" height="20" class="abstract-class" />
  <text x="120" y="835" class="text">抽象类</text>
  
  <rect x="200" y="820" width="40" height="20" class="interface" />
  <text x="250" y="835" class="text">接口</text>
  
  <rect x="70" y="845" width="40" height="20" class="entity" />
  <text x="120" y="860" class="text">实体类</text>
  
  <rect x="200" y="845" width="40" height="20" class="service" />
  <text x="250" y="860" class="text">服务类</text>
  
  <!-- 说明文字 -->
  <text x="400" y="750" class="text" font-size="14" font-weight="bold">架构说明：</text>
  <text x="400" y="770" class="text">1. 配置层：BaseConfig为基础配置抽象类，各模型配置类继承实现</text>
  <text x="400" y="785" class="text">2. 工厂层：ConfigFactory负责创建配置，ModelFactory负责创建模型</text>
  <text x="400" y="800" class="text">3. 管理层：ConfigManager管理配置，ModelManager管理模型实例</text>
  <text x="400" y="815" class="text">4. 持久层：UserModelConfig实体，Repository接口及实现</text>
  <text x="400" y="830" class="text">5. 应用层：UserModelConfigService提供业务逻辑</text>
  <text x="400" y="845" class="text">6. 接口层：UserModelConfigController提供REST API</text>
  <text x="400" y="860" class="text">7. 模型层：BaseModel接口，各模型实现类</text>
  
</svg>